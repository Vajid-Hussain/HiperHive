// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/interface_repo.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"
	time "time"

	requestmodel_auth_server "github.com/Vajid-Hussain/HiperHive/auth-service/pkg/infrastructure/model/requestModel"
	responsemodel_auth_server "github.com/Vajid-Hussain/HiperHive/auth-service/pkg/infrastructure/model/responseModel"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// ConfirmSignup mocks base method.
func (m *MockIUserRepository) ConfirmSignup(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSignup", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSignup indicates an expected call of ConfirmSignup.
func (mr *MockIUserRepositoryMockRecorder) ConfirmSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSignup", reflect.TypeOf((*MockIUserRepository)(nil).ConfirmSignup), arg0)
}

// CreateOtp mocks base method.
func (m *MockIUserRepository) CreateOtp(arg0, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOtp indicates an expected call of CreateOtp.
func (mr *MockIUserRepositoryMockRecorder) CreateOtp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtp", reflect.TypeOf((*MockIUserRepository)(nil).CreateOtp), arg0, arg1, arg2)
}

// DeleteCoverPhoto mocks base method.
func (m *MockIUserRepository) DeleteCoverPhoto(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoverPhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoverPhoto indicates an expected call of DeleteCoverPhoto.
func (mr *MockIUserRepositoryMockRecorder) DeleteCoverPhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoverPhoto", reflect.TypeOf((*MockIUserRepository)(nil).DeleteCoverPhoto), arg0)
}

// DeleteExpiredStatus mocks base method.
func (m *MockIUserRepository) DeleteExpiredStatus(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteExpiredStatus", arg0)
}

// DeleteExpiredStatus indicates an expected call of DeleteExpiredStatus.
func (mr *MockIUserRepositoryMockRecorder) DeleteExpiredStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredStatus", reflect.TypeOf((*MockIUserRepository)(nil).DeleteExpiredStatus), arg0)
}

// DeletePendingUsers mocks base method.
func (m *MockIUserRepository) DeletePendingUsers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingUsers")
}

// DeletePendingUsers indicates an expected call of DeletePendingUsers.
func (mr *MockIUserRepositoryMockRecorder) DeletePendingUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingUsers", reflect.TypeOf((*MockIUserRepository)(nil).DeletePendingUsers))
}

// DeleteProfilePhoto mocks base method.
func (m *MockIUserRepository) DeleteProfilePhoto(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockIUserRepositoryMockRecorder) DeleteProfilePhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockIUserRepository)(nil).DeleteProfilePhoto), arg0)
}

// DeleteUnverifiedUsers mocks base method.
func (m *MockIUserRepository) DeleteUnverifiedUsers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUnverifiedUsers")
}

// DeleteUnverifiedUsers indicates an expected call of DeleteUnverifiedUsers.
func (mr *MockIUserRepositoryMockRecorder) DeleteUnverifiedUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnverifiedUsers", reflect.TypeOf((*MockIUserRepository)(nil).DeleteUnverifiedUsers))
}

// DeleteUserAcoount mocks base method.
func (m *MockIUserRepository) DeleteUserAcoount(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAcoount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAcoount indicates an expected call of DeleteUserAcoount.
func (mr *MockIUserRepositoryMockRecorder) DeleteUserAcoount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAcoount", reflect.TypeOf((*MockIUserRepository)(nil).DeleteUserAcoount), arg0)
}

// EmailIsExist mocks base method.
func (m *MockIUserRepository) EmailIsExist(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmailIsExist", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmailIsExist indicates an expected call of EmailIsExist.
func (mr *MockIUserRepositoryMockRecorder) EmailIsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailIsExist", reflect.TypeOf((*MockIUserRepository)(nil).EmailIsExist), arg0)
}

// FetchMailUsingUserID mocks base method.
func (m *MockIUserRepository) FetchMailUsingUserID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMailUsingUserID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMailUsingUserID indicates an expected call of FetchMailUsingUserID.
func (mr *MockIUserRepositoryMockRecorder) FetchMailUsingUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMailUsingUserID", reflect.TypeOf((*MockIUserRepository)(nil).FetchMailUsingUserID), arg0)
}

// FetchOtp mocks base method.
func (m *MockIUserRepository) FetchOtp(arg0 string, arg1 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOtp", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOtp indicates an expected call of FetchOtp.
func (mr *MockIUserRepositoryMockRecorder) FetchOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOtp", reflect.TypeOf((*MockIUserRepository)(nil).FetchOtp), arg0, arg1)
}

// FetchUserIDUsingMail mocks base method.
func (m *MockIUserRepository) FetchUserIDUsingMail(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserIDUsingMail", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserIDUsingMail indicates an expected call of FetchUserIDUsingMail.
func (mr *MockIUserRepositoryMockRecorder) FetchUserIDUsingMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserIDUsingMail", reflect.TypeOf((*MockIUserRepository)(nil).FetchUserIDUsingMail), arg0)
}

// ForgotPassword mocks base method.
func (m *MockIUserRepository) ForgotPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockIUserRepositoryMockRecorder) ForgotPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockIUserRepository)(nil).ForgotPassword), arg0, arg1)
}

// GetUserPasswordUsingEmail mocks base method.
func (m *MockIUserRepository) GetUserPasswordUsingEmail(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordUsingEmail", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordUsingEmail indicates an expected call of GetUserPasswordUsingEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserPasswordUsingEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordUsingEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserPasswordUsingEmail), arg0)
}

// GetUserProfile mocks base method.
func (m *MockIUserRepository) GetUserProfile(arg0 string) (*responsemodel_auth_server.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0)
	ret0, _ := ret[0].(*responsemodel_auth_server.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockIUserRepositoryMockRecorder) GetUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockIUserRepository)(nil).GetUserProfile), arg0)
}

// IsUserIDExist mocks base method.
func (m *MockIUserRepository) IsUserIDExist(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserIDExist", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserIDExist indicates an expected call of IsUserIDExist.
func (mr *MockIUserRepositoryMockRecorder) IsUserIDExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserIDExist", reflect.TypeOf((*MockIUserRepository)(nil).IsUserIDExist), arg0)
}

// SerchUsers mocks base method.
func (m *MockIUserRepository) SerchUsers(arg0 string, arg1 requestmodel_auth_server.Pagination) (*[]responsemodel_auth_server.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerchUsers", arg0, arg1)
	ret0, _ := ret[0].(*[]responsemodel_auth_server.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerchUsers indicates an expected call of SerchUsers.
func (mr *MockIUserRepositoryMockRecorder) SerchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerchUsers", reflect.TypeOf((*MockIUserRepository)(nil).SerchUsers), arg0, arg1)
}

// Signup mocks base method.
func (m *MockIUserRepository) Signup(arg0 requestmodel_auth_server.UserSignup) (*responsemodel_auth_server.UserSignup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(*responsemodel_auth_server.UserSignup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockIUserRepositoryMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockIUserRepository)(nil).Signup), arg0)
}

// UpdateCoverPhoto mocks base method.
func (m *MockIUserRepository) UpdateCoverPhoto(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoverPhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoverPhoto indicates an expected call of UpdateCoverPhoto.
func (mr *MockIUserRepositoryMockRecorder) UpdateCoverPhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoverPhoto", reflect.TypeOf((*MockIUserRepository)(nil).UpdateCoverPhoto), arg0, arg1)
}

// UpdateOrCreateUserDescription mocks base method.
func (m *MockIUserRepository) UpdateOrCreateUserDescription(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateUserDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreateUserDescription indicates an expected call of UpdateOrCreateUserDescription.
func (mr *MockIUserRepositoryMockRecorder) UpdateOrCreateUserDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateUserDescription", reflect.TypeOf((*MockIUserRepository)(nil).UpdateOrCreateUserDescription), arg0, arg1)
}

// UpdateOrCreateUserStatus mocks base method.
func (m *MockIUserRepository) UpdateOrCreateUserStatus(arg0 requestmodel_auth_server.UserProfileStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateUserStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreateUserStatus indicates an expected call of UpdateOrCreateUserStatus.
func (mr *MockIUserRepositoryMockRecorder) UpdateOrCreateUserStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateUserStatus", reflect.TypeOf((*MockIUserRepository)(nil).UpdateOrCreateUserStatus), arg0)
}

// UpdateUserProfilePhoto mocks base method.
func (m *MockIUserRepository) UpdateUserProfilePhoto(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfilePhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfilePhoto indicates an expected call of UpdateUserProfilePhoto.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserProfilePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfilePhoto", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserProfilePhoto), arg0, arg1)
}

// UserNameIsExist mocks base method.
func (m *MockIUserRepository) UserNameIsExist(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserNameIsExist", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserNameIsExist indicates an expected call of UserNameIsExist.
func (mr *MockIUserRepositoryMockRecorder) UserNameIsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserNameIsExist", reflect.TypeOf((*MockIUserRepository)(nil).UserNameIsExist), arg0)
}

// VerifyUserSignup mocks base method.
func (m *MockIUserRepository) VerifyUserSignup(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserSignup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserSignup indicates an expected call of VerifyUserSignup.
func (mr *MockIUserRepositoryMockRecorder) VerifyUserSignup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserSignup", reflect.TypeOf((*MockIUserRepository)(nil).VerifyUserSignup), arg0, arg1)
}

// MockIAdminRepository is a mock of IAdminRepository interface.
type MockIAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminRepositoryMockRecorder
}

// MockIAdminRepositoryMockRecorder is the mock recorder for MockIAdminRepository.
type MockIAdminRepositoryMockRecorder struct {
	mock *MockIAdminRepository
}

// NewMockIAdminRepository creates a new mock instance.
func NewMockIAdminRepository(ctrl *gomock.Controller) *MockIAdminRepository {
	mock := &MockIAdminRepository{ctrl: ctrl}
	mock.recorder = &MockIAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminRepository) EXPECT() *MockIAdminRepositoryMockRecorder {
	return m.recorder
}

// BlockUserAccount mocks base method.
func (m *MockIAdminRepository) BlockUserAccount(userID string) (*responsemodel_auth_server.AbstractUserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUserAccount", userID)
	ret0, _ := ret[0].(*responsemodel_auth_server.AbstractUserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUserAccount indicates an expected call of BlockUserAccount.
func (mr *MockIAdminRepositoryMockRecorder) BlockUserAccount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUserAccount", reflect.TypeOf((*MockIAdminRepository)(nil).BlockUserAccount), userID)
}

// FetchPaswordUsingEmail mocks base method.
func (m *MockIAdminRepository) FetchPaswordUsingEmail(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPaswordUsingEmail", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPaswordUsingEmail indicates an expected call of FetchPaswordUsingEmail.
func (mr *MockIAdminRepositoryMockRecorder) FetchPaswordUsingEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPaswordUsingEmail", reflect.TypeOf((*MockIAdminRepository)(nil).FetchPaswordUsingEmail), arg0)
}

// UnBlockUserAccount mocks base method.
func (m *MockIAdminRepository) UnBlockUserAccount(arg0 string) (*responsemodel_auth_server.AbstractUserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUserAccount", arg0)
	ret0, _ := ret[0].(*responsemodel_auth_server.AbstractUserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnBlockUserAccount indicates an expected call of UnBlockUserAccount.
func (mr *MockIAdminRepositoryMockRecorder) UnBlockUserAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUserAccount", reflect.TypeOf((*MockIAdminRepository)(nil).UnBlockUserAccount), arg0)
}
