// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/friend-svc/pb/friend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreindsServiceClient is the client API for FreindsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreindsServiceClient interface {
	FriendsRequest(ctx context.Context, in *FriendsRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type freindsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreindsServiceClient(cc grpc.ClientConnInterface) FreindsServiceClient {
	return &freindsServiceClient{cc}
}

func (c *freindsServiceClient) FriendsRequest(ctx context.Context, in *FriendsRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/friends.FreindsService/FriendsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreindsServiceServer is the server API for FreindsService service.
// All implementations must embed UnimplementedFreindsServiceServer
// for forward compatibility
type FreindsServiceServer interface {
	FriendsRequest(context.Context, *FriendsRequestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFreindsServiceServer()
}

// UnimplementedFreindsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFreindsServiceServer struct {
}

func (UnimplementedFreindsServiceServer) FriendsRequest(context.Context, *FriendsRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendsRequest not implemented")
}
func (UnimplementedFreindsServiceServer) mustEmbedUnimplementedFreindsServiceServer() {}

// UnsafeFreindsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreindsServiceServer will
// result in compilation errors.
type UnsafeFreindsServiceServer interface {
	mustEmbedUnimplementedFreindsServiceServer()
}

func RegisterFreindsServiceServer(s grpc.ServiceRegistrar, srv FreindsServiceServer) {
	s.RegisterService(&FreindsService_ServiceDesc, srv)
}

func _FreindsService_FriendsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreindsServiceServer).FriendsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friends.FreindsService/FriendsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreindsServiceServer).FriendsRequest(ctx, req.(*FriendsRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreindsService_ServiceDesc is the grpc.ServiceDesc for FreindsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreindsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friends.FreindsService",
	HandlerType: (*FreindsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendsRequest",
			Handler:    _FreindsService_FriendsRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/friend-svc/pb/friend.proto",
}
