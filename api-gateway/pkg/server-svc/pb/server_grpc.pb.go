// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/server-svc/pb/server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	JoinToServer(ctx context.Context, in *JoinToServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCategoryOfServer(ctx context.Context, in *GetCategoryOfServerRequest, opts ...grpc.CallOption) (*GetCategoryOfServerResponse, error)
	GetChannelsOfServer(ctx context.Context, in *GetChannelsOfServerRequest, opts ...grpc.CallOption) (*GetChannelsOfServerResponse, error)
	GetUserServer(ctx context.Context, in *GetUserServerRequest, opts ...grpc.CallOption) (*GetUserServerResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	GetChannelMessage(ctx context.Context, in *GetChannelMessageRequest, opts ...grpc.CallOption) (*GetChannelMessageResponse, error)
	UpdateServerPhoto(ctx context.Context, in *UpdateServerPhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateServerDiscription(ctx context.Context, in *UpdateServerDiscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetServerMembers(ctx context.Context, in *GetServerMembersRequest, opts ...grpc.CallOption) (*GetServerMembersResponse, error)
	RemoveUserFromServer(ctx context.Context, in *RemoveUserFromServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeftFromServer(ctx context.Context, in *LeftFromServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// forum
	GetForumPost(ctx context.Context, in *GetForumPostRequest, opts ...grpc.CallOption) (*GetForumPostResponse, error)
	GetSingleForumPost(ctx context.Context, in *GetSingleForumPostRequest, opts ...grpc.CallOption) (*GetSingleForumPostResponse, error)
	GetPostCommand(ctx context.Context, in *GetPostCommandRequest, opts ...grpc.CallOption) (*GetPostCommandResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, "/Server/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) JoinToServer(ctx context.Context, in *JoinToServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/JoinToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetCategoryOfServer(ctx context.Context, in *GetCategoryOfServerRequest, opts ...grpc.CallOption) (*GetCategoryOfServerResponse, error) {
	out := new(GetCategoryOfServerResponse)
	err := c.cc.Invoke(ctx, "/Server/GetCategoryOfServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetChannelsOfServer(ctx context.Context, in *GetChannelsOfServerRequest, opts ...grpc.CallOption) (*GetChannelsOfServerResponse, error) {
	out := new(GetChannelsOfServerResponse)
	err := c.cc.Invoke(ctx, "/Server/GetChannelsOfServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetUserServer(ctx context.Context, in *GetUserServerRequest, opts ...grpc.CallOption) (*GetUserServerResponse, error) {
	out := new(GetUserServerResponse)
	err := c.cc.Invoke(ctx, "/Server/GetUserServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, "/Server/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetChannelMessage(ctx context.Context, in *GetChannelMessageRequest, opts ...grpc.CallOption) (*GetChannelMessageResponse, error) {
	out := new(GetChannelMessageResponse)
	err := c.cc.Invoke(ctx, "/Server/GetChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateServerPhoto(ctx context.Context, in *UpdateServerPhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/UpdateServerPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateServerDiscription(ctx context.Context, in *UpdateServerDiscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/UpdateServerDiscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetServerMembers(ctx context.Context, in *GetServerMembersRequest, opts ...grpc.CallOption) (*GetServerMembersResponse, error) {
	out := new(GetServerMembersResponse)
	err := c.cc.Invoke(ctx, "/Server/GetServerMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RemoveUserFromServer(ctx context.Context, in *RemoveUserFromServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/RemoveUserFromServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/UpdateMemberRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) LeftFromServer(ctx context.Context, in *LeftFromServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/LeftFromServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Server/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetForumPost(ctx context.Context, in *GetForumPostRequest, opts ...grpc.CallOption) (*GetForumPostResponse, error) {
	out := new(GetForumPostResponse)
	err := c.cc.Invoke(ctx, "/Server/GetForumPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetSingleForumPost(ctx context.Context, in *GetSingleForumPostRequest, opts ...grpc.CallOption) (*GetSingleForumPostResponse, error) {
	out := new(GetSingleForumPostResponse)
	err := c.cc.Invoke(ctx, "/Server/GetSingleForumPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetPostCommand(ctx context.Context, in *GetPostCommandRequest, opts ...grpc.CallOption) (*GetPostCommandResponse, error) {
	out := new(GetPostCommandResponse)
	err := c.cc.Invoke(ctx, "/Server/GetPostCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*emptypb.Empty, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*emptypb.Empty, error)
	JoinToServer(context.Context, *JoinToServerRequest) (*emptypb.Empty, error)
	GetCategoryOfServer(context.Context, *GetCategoryOfServerRequest) (*GetCategoryOfServerResponse, error)
	GetChannelsOfServer(context.Context, *GetChannelsOfServerRequest) (*GetChannelsOfServerResponse, error)
	GetUserServer(context.Context, *GetUserServerRequest) (*GetUserServerResponse, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error)
	GetChannelMessage(context.Context, *GetChannelMessageRequest) (*GetChannelMessageResponse, error)
	UpdateServerPhoto(context.Context, *UpdateServerPhotoRequest) (*emptypb.Empty, error)
	UpdateServerDiscription(context.Context, *UpdateServerDiscriptionRequest) (*emptypb.Empty, error)
	GetServerMembers(context.Context, *GetServerMembersRequest) (*GetServerMembersResponse, error)
	RemoveUserFromServer(context.Context, *RemoveUserFromServerRequest) (*emptypb.Empty, error)
	UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*emptypb.Empty, error)
	LeftFromServer(context.Context, *LeftFromServerRequest) (*emptypb.Empty, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	// forum
	GetForumPost(context.Context, *GetForumPostRequest) (*GetForumPostResponse, error)
	GetSingleForumPost(context.Context, *GetSingleForumPostRequest) (*GetSingleForumPostResponse, error)
	GetPostCommand(context.Context, *GetPostCommandRequest) (*GetPostCommandResponse, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedServerServer) CreateCategory(context.Context, *CreateCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedServerServer) CreateChannel(context.Context, *CreateChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedServerServer) JoinToServer(context.Context, *JoinToServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinToServer not implemented")
}
func (UnimplementedServerServer) GetCategoryOfServer(context.Context, *GetCategoryOfServerRequest) (*GetCategoryOfServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryOfServer not implemented")
}
func (UnimplementedServerServer) GetChannelsOfServer(context.Context, *GetChannelsOfServerRequest) (*GetChannelsOfServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsOfServer not implemented")
}
func (UnimplementedServerServer) GetUserServer(context.Context, *GetUserServerRequest) (*GetUserServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserServer not implemented")
}
func (UnimplementedServerServer) GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedServerServer) GetChannelMessage(context.Context, *GetChannelMessageRequest) (*GetChannelMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessage not implemented")
}
func (UnimplementedServerServer) UpdateServerPhoto(context.Context, *UpdateServerPhotoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerPhoto not implemented")
}
func (UnimplementedServerServer) UpdateServerDiscription(context.Context, *UpdateServerDiscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerDiscription not implemented")
}
func (UnimplementedServerServer) GetServerMembers(context.Context, *GetServerMembersRequest) (*GetServerMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMembers not implemented")
}
func (UnimplementedServerServer) RemoveUserFromServer(context.Context, *RemoveUserFromServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromServer not implemented")
}
func (UnimplementedServerServer) UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberRole not implemented")
}
func (UnimplementedServerServer) LeftFromServer(context.Context, *LeftFromServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftFromServer not implemented")
}
func (UnimplementedServerServer) DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServerServer) GetForumPost(context.Context, *GetForumPostRequest) (*GetForumPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForumPost not implemented")
}
func (UnimplementedServerServer) GetSingleForumPost(context.Context, *GetSingleForumPostRequest) (*GetSingleForumPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleForumPost not implemented")
}
func (UnimplementedServerServer) GetPostCommand(context.Context, *GetPostCommandRequest) (*GetPostCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostCommand not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_JoinToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).JoinToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/JoinToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).JoinToServer(ctx, req.(*JoinToServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetCategoryOfServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryOfServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetCategoryOfServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetCategoryOfServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetCategoryOfServer(ctx, req.(*GetCategoryOfServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetChannelsOfServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsOfServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetChannelsOfServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetChannelsOfServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetChannelsOfServer(ctx, req.(*GetChannelsOfServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetUserServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetUserServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetUserServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetUserServer(ctx, req.(*GetUserServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetChannelMessage(ctx, req.(*GetChannelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateServerPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateServerPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateServerPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateServerPhoto(ctx, req.(*UpdateServerPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateServerDiscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerDiscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateServerDiscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateServerDiscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateServerDiscription(ctx, req.(*UpdateServerDiscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetServerMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetServerMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetServerMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetServerMembers(ctx, req.(*GetServerMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RemoveUserFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RemoveUserFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/RemoveUserFromServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RemoveUserFromServer(ctx, req.(*RemoveUserFromServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateMemberRole(ctx, req.(*UpdateMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_LeftFromServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftFromServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).LeftFromServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/LeftFromServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).LeftFromServer(ctx, req.(*LeftFromServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetForumPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForumPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetForumPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetForumPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetForumPost(ctx, req.(*GetForumPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetSingleForumPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleForumPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetSingleForumPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetSingleForumPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetSingleForumPost(ctx, req.(*GetSingleForumPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetPostCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetPostCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetPostCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetPostCommand(ctx, req.(*GetPostCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _Server_CreateServer_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Server_CreateCategory_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _Server_CreateChannel_Handler,
		},
		{
			MethodName: "JoinToServer",
			Handler:    _Server_JoinToServer_Handler,
		},
		{
			MethodName: "GetCategoryOfServer",
			Handler:    _Server_GetCategoryOfServer_Handler,
		},
		{
			MethodName: "GetChannelsOfServer",
			Handler:    _Server_GetChannelsOfServer_Handler,
		},
		{
			MethodName: "GetUserServer",
			Handler:    _Server_GetUserServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _Server_GetServer_Handler,
		},
		{
			MethodName: "GetChannelMessage",
			Handler:    _Server_GetChannelMessage_Handler,
		},
		{
			MethodName: "UpdateServerPhoto",
			Handler:    _Server_UpdateServerPhoto_Handler,
		},
		{
			MethodName: "UpdateServerDiscription",
			Handler:    _Server_UpdateServerDiscription_Handler,
		},
		{
			MethodName: "GetServerMembers",
			Handler:    _Server_GetServerMembers_Handler,
		},
		{
			MethodName: "RemoveUserFromServer",
			Handler:    _Server_RemoveUserFromServer_Handler,
		},
		{
			MethodName: "UpdateMemberRole",
			Handler:    _Server_UpdateMemberRole_Handler,
		},
		{
			MethodName: "LeftFromServer",
			Handler:    _Server_LeftFromServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _Server_DeleteServer_Handler,
		},
		{
			MethodName: "GetForumPost",
			Handler:    _Server_GetForumPost_Handler,
		},
		{
			MethodName: "GetSingleForumPost",
			Handler:    _Server_GetSingleForumPost_Handler,
		},
		{
			MethodName: "GetPostCommand",
			Handler:    _Server_GetPostCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server-svc/pb/server.proto",
}
